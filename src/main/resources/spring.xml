<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--加载解析properyies文件-->
    <context:property-placeholder location="classpath:jdbc.properties" />


   <!-- &lt;!&ndash; 包扫描&ndash;&gt;
    <context:component-scan base-package="com.smalltao.service.impl" />-->


    <!--
        the transactional advice (what 'happens'; see the <aop:advisor/> bean below)
        配置声明式事务传播特性和事务之间的隔离级别
     -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!--
                other methods use the default transaction settings (see below)
                propagation:传播特性，约束了方法和事务之间的关系
                            REQUIRED:必须在事务下执行
                isolation:约束了事务和事务之间的共享关系
                rollback-for:发生指定异常后数据回顾
             -->
            <tx:method name="add*" propagation="REQUIRED" isolation="DEFAULT"  rollback-for="java.lang.Exception" />
            <tx:method name="modify*" propagation="REQUIRED" isolation="DEFAULT"  rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"  rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"  rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"  rollback-for="java.lang.Exception" />

            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
        </tx:attributes>
    </tx:advice>



    <!--
        ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface
        声明式事务，指定对应的方法参与上面传播特性的配置
    -->
    <aop:config>
        <!--指定了一个范围-->
        <aop:pointcut id="transmethods" expression="execution(* cn.itcast.service.impl.*.*(..))"/>

        <aop:advisor advice-ref="txAdvice" pointcut-ref="transmethods"/>
    </aop:config>

    <!--
        don't forget the DataSource
        配置数据源
     -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.pwd}" />
    </bean>


    <!--
        similarly, don't forget the PlatformTransactionManager
        事务管理器
    -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--创建SqlSessionFactory对象-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
        <!--MyBatis核心配置文件，可以不配置-->
        <property name="configLocation" value="classpath:mybatis.xml" />

        <!--配置对应包下的别名-->
        <property name="typeAliasesPackage" value="com.smalltao.model" />

        <!--
            指定映射文件
            如果xml文件和接口文件在同一个包下，如下代码可以不用配置
         -->
        <property name="mapperLocations">
            <list>
                <value>classpath:com/smalltao/mapper/*Mapper.xml</value>
            </list>
        </property>

        <!--引用数据源-->
        <property name="dataSource" ref="dataSource" />
    </bean>

 <!--接口包扫描-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.smalltao.mapper" />
        &lt;!&ndash;
            可以不用指定，但是在多数据源中，需要指定
        &ndash;&gt;
        <property name="sqlSessionFactoryBeanName" value="sessionFactory" />
    </bean>-->

    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.smalltao.mapper"
          p:sqlSessionFactoryBeanName="sqlSessionFactoryBean">
        <!--通用接口-->
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>



</beans>